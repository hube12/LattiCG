package randomreverser.math.lattice.optimization;

import randomreverser.math.component.BigFraction;
import randomreverser.math.component.BigMatrix;
import randomreverser.math.component.BigVector;
import randomreverser.math.lattice.LLL.LLL;
import randomreverser.math.lattice.LLL.Params;
import randomreverser.math.lattice.LLL.Result;

import java.math.BigInteger;

public class BKZ {
    private Params params;
    private BigMatrix basis;
    private BigMatrix baseGSO; // this is the Gram-Schmidt (almost Orthogonal thus GSO) basis
    private BigMatrix mu; // those are the mu that are used in the Gram-Schimdt process*
    private BigVector norms; // those are simply the magnitude of each GS vectors
    private LLL lll;
    public BKZ(BigMatrix lattice,Params params) {
        this.params=params;
        this.basis=lattice.copy();
        this.lll=new LLL(lattice,params);
    }

    /**
     * The BKZ algorithm as described
     *
     * @param lattice the lattice to reduce
     * @param blockSize the block size to use in BKZ
     * @param params  the parameters to be passed to LLL
     * @return the reduced lattice
     */
    public static Result reduce(BigMatrix lattice, int blockSize,Params params) {
        return new BKZ(lattice,params).reduceBKZ(lattice,blockSize);
    }
    public static Result reduce(BigMatrix lattice,int blockSize) {
        return new BKZ(lattice,new Params()).reduceBKZ(lattice,blockSize);
    }


    private boolean passvec(BigVector v, int index, int dim) {
        int i;

        if (!v.get(index).equals(BigFraction.ONE)) {
            return false;
        }
        for (i = 0; i < dim; i++) {
            if (i != index && !v.get(i).equals(BigFraction.ZERO)) {
                return false;
            }
        }
        return true;
    }

    /**
     * BKZ reduces a lattice generated by a linearly independant set of vectors.
     *
     * @param lattice   the lattice to BKZ reduce
     * @param blockSize the blockSize to use in BKZ
     * @return a result encapsulating the lattice and the transformations done by BKZ
     */
    private Result reduceBKZ(BigMatrix lattice, int blockSize) {
        int k, h;
        int z = 0;
        int j = 0;
        int beta = blockSize;
        this.basis=lattice.copy();
        Result result= lll.reduceLLL(basis);
        updateWithResult(result);
        int dim = result.getReducedBasis().getRowCount();
        int colCount = result.getReducedBasis().getColumnCount();
        while (z < dim - 1) {
            j = (j % (dim - 1)) + 1;
            k = Math.min(j + beta - 1, dim);
            h = Math.min(k + 1, dim);
            BigVector v = enumerateBKZ(j - 1, k - 1, dim, norms, mu);
            if (!passvec(v, j - 1, dim)) {
                z = 0;
                BigVector newVec=new BigVector(dim);
                for (int l = 0; l < dim; l++) {
                    for (int s = j - 1; s <= k - 1; s++) {
                        //basis[dim][l] += v[i] * basis[i][l];
                        newVec.set(l, newVec.get(l).add(v.get(s).multiply(basis.get(s, l))));
                    }
                }
                BigMatrix newBlock = new BigMatrix(h + 1, colCount);
                for (int row = 0; row <= j - 2; row++) {
                    // set row 0 to j-2 (eq to 1 to j-1)
                    newBlock.setRow(row, basis.getRow(row));
                }
                // set row j-1 (eq j)
                newBlock.setRow(j-1, newVec);
                // set row j to h+1
                for (int row = j-1; row < h; row++) {
                    newBlock.setRow(row + 1, basis.getRow(row));
                }
                result = lll.reduceLLL(newBlock);

            } else {
                z = z + 1;
                result = lll.reduceLLL(basis);
                updateWithResult(result);
            }
        }
        return result;
    }
    private void updateWithResult(Result result){
        for (int row = 0; row < result.getReducedBasis().getRowCount(); row++) {
            basis.setRow(row, result.getReducedBasis().getRow(row));
            mu.setRow(row, result.getGramSchmidtCoefficients().getRow(row));
            baseGSO.setRow(row, result.getGramSchmidtBasis().getRow(row));
            norms.set(row,result.getGramSchmidtSizes().get(row));
        }
    }

    private BigVector enumerateBKZ(int ini, int fim, int dim, BigVector B, BigMatrix blockMu) {
        BigFraction[] cT = new BigFraction[dim + 1];
        BigFraction[] y = new BigFraction[dim + 1];

        BigInteger[] v = new BigInteger[dim + 1];
        BigInteger[] delta = new BigInteger[dim + 1];
        BigInteger[] d = new BigInteger[dim + 1];
        BigVector u = new BigVector(dim + 1);
        BigInteger[] uT = new BigInteger[dim + 1];
        BigInteger auxUT;
        BigFraction cL, auxY;
        int s = ini, t = ini, i;
        int window = fim - ini + 1;

        // Initialize vectors
        cL = B.get(ini);
        d[ini] = uT[ini] = BigInteger.ONE;
        u.set(ini, BigFraction.ONE);
        delta[ini] = v[ini] = BigInteger.ZERO;
        y[ini] = BigFraction.ZERO;

        for (i = ini + 1; i <= fim + 1; i++) {
            uT[i] = delta[i] = v[i] = BigInteger.ZERO;
            u.set(i, BigFraction.ZERO);
            cT[i] = y[i] = BigFraction.ZERO;
            d[i] = BigInteger.ONE;
        }
        while (t <= fim) {

            // cT[t] = cT[t + 1] + (auxY[t] - 2*uT[t]*y[t] + auxUT[t]) * B[t];
            // cT(t) := cT(t+1) + (y(t) + u(t))^2 * c(t)  but (y(t)+u(t))^2= y(t)^2 + u(t)^2 + 2*u(t)*y(t)
            auxY = y[t].multiply(y[t]); // this is done to overcome loss in precision remember how they cumulate...
            auxUT = uT[t].multiply(uT[t]);
            cT[t] = cT[t + 1].add((auxY.add(y[t].multiply(uT[t]).multiply(BigInteger.TWO)).add(auxUT)).multiply(B.get(t)));
            if (cT[t].compareTo(cL) < 0) {
                if (t > ini) {
                    t--;
                    y[t] = BigFraction.ZERO;
                    for (i = t + 1; i <= s; i++) {
                        y[t] = y[t].add(blockMu.get(i, t).multiply(uT[i]));
                    }
                    uT[t] = v[t] = y[t].round().negate();
                    delta[t] = BigInteger.ZERO;
                    // if (uT[t] > -y[t])
                    if (y[t].negate().compareTo(uT[t]) < 0) {
                        d[t] = BigInteger.ONE.negate();
                    } else {
                        d[t] = BigInteger.ONE;
                    }
                } else {
                    cL = cT[ini];
                    for (int j = ini; j <=fim; j++) {
                        u.set(j, new BigFraction(uT[j]));
                    }
                }
            } else {
                t++;
                s = Math.max(s, t); //Get max value
                if (t < s) {
                    delta[t] = delta[t].negate();
                }
                if (delta[t].multiply(d[t]).compareTo(BigInteger.ZERO) >= 0) {
                    delta[t] = delta[t].add(d[t]);
                }
                uT[t] = v[t].add(delta[t]);
            }
        }
        return u;
    }

}
